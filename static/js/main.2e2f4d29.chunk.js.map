{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","type","className","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","filteredMonsters","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACLC,UAAU,SACVH,YAAcA,EACdI,SAAWH,KCJTI,G,YAAO,SAACC,GAAD,OAChB,sBAAKH,UAAU,iBAAf,UACI,qBAAKI,IAAI,iBAAiBC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAC7B,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCFbC,EAAW,SAAAP,GAAK,OACzB,qBAAKH,UAAU,YAAf,SACKG,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCoChBM,G,wDApCb,aAAe,IAAD,8BACZ,gBAcFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAY,IALF,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACJ,SAAUa,EAAOC,iBAAkBD,S,oBAOpE,WAAU,IAAD,EAC2BE,KAAKP,MAA/BR,EADD,EACCA,SAAUK,EADX,EACWA,YACZS,EAAmBd,EAASgB,QAAO,SAAArB,GAAO,OAC9CA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWH,YAAY,kBACZC,aAAc4B,KAAK5B,eAC9B,cAAC,EAAD,CAAUa,SAAUc,W,GA/BVK,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2e2f4d29.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type=\"search\" \r\n           className=\"search\"\r\n           placeholder={ placeholder }\r\n           onChange={ handleChange }>\r\n    </input>\r\n)","import React from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster selfie\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from \"react\";\r\n\r\nimport './card-list.styles.css';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster => \r\n            <Card key={monster.id} monster={monster}/>\r\n        )}\r\n    </div>\r\n);","import { Component } from 'react';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField:''\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState( {monsters: users, filteredMonsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"search monsters\" \n                   handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}